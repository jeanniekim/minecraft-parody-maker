# machine learning minecraft parody maker
[7/18/22]

goal: input song (maybe even song name?), output legit minecraft parody lyrics

ideas: 
- have textfile/database of *popular* minecraft related words
  - ex. mine, mining, creeper, zombie, sword, pick, axe
- replace words from og lyrics that:
  * rhyme / partially rhyme
  * match part of speech 
  * match number of syllables
...with the minecraft alternative
  - will be a hierarchy of decisions
    - highest is rhyme + pos + syllables (all matching)
    - maybe if the word matches syllables + pos but doesn't rhyme it's ok
      - eg. i'm falling -> i'm mining (s, p, Xr)
      > but only if it's not the last word(?)
        - rhyme schemes???
    - not matching pos is pretty bad
      - i'm in the mining (X)
- somehow deal with common phrases
  - ex. mining + diamonds, gold, iron
    - diamonds (2 syllables), iron (2 syllables), gold (1 syllable)
      - decision tree/hierarchy again based on those?


how to match rhymes
how to match POS -> nltk
 - it's wrong sometimes "mine diamonds" -> noun noun
how to match syllables

step 1: read in the file

- how should the final dataset look
  - dict with word (pos, syllables, rhyme???)

rhyme: https://stackoverflow.com/questions/25714531/find-rhyme-using-nltk-in-python

1. read in the lyrics
2. analyze lyrics
3. perform Replacements
4. write the lyrics to new file

> POS tagging the lyrics
  - how to deal with "Enemy-y-y-y", parentheticals "(Woo!)", part labels "[Drake]"

DONE: POS-only lyrics generator 

how to preserve line breaks in the pos tagging processs?
  - doing line by line limits potential to keep words consistent across the lyrics
    > e.g. Chorus lines should stay consistent
      - "enemy" -> "minecraft" is a constant
        - specific nouns should be detected? to keep consistent?

replaces ALL words with a POS match 
- don't do this? it works pretty well 

- Capital Matching
  - preserve capitals
    > short fix: capitalize all lines (standard lyrics practice)
      - but this will uncapitalize other things in the lyrics "I love the DEA" -> "I love the dea"
      - doesn't change the OG string though
      - doesn't work for ()

    > regex???
  * FIXED: checked word by word whether capitalized
      - all caps probably refers to an abbreviation (USA, DEA) which we don't have... so maybe this is not necessary
      - won't work if the word has a capital in the middle of it though "FedEx", which is fine I think

next up: syllables

http://www.onebloke.com/2011/06/counting-syllables-accurately-in-python-on-google-app-engine/
- uh oh... minecraft doesn't work...
- custom syllables for things that won't be in the dictionary? (in mineWords)
  - just put them for every one
- wish there was a package that could predict syllable count, not just refer to an existing dictionary
  - or maybe both
    > site includes such code but it's outdated

https://eayd.in/?p=232
^ the mother site

https://rhymebrain.com/api.html
^ from a comment on one of those blogs
- includes rhymes + syllable count
- uses cmu dictionary and its own algorithm when it's not in the dictionary !

using rhymebrain API: https://www.twilio.com/blog/2018/08/improving-your-pun-game-with-python-rhymebrain-and-the-twilio-api-for-whatsapp.html


rhymebrain is STRONG. it's GOOD!!!

https://pypi.org/project/pyrhyme/ 
^ python wrapper for rhymebrain

uh oh... rhymebrain doesn't work well with contractions 
- I'm -> 2 syllables
- You're -> 0 syllables?

also, rhymebrain is kind of slow (have to access a website)
- need wifi to work

https://medium.com/@mholtzscher/programmatically-counting-syllables-ca760435fab4
syllapy? 
linux :(((


https://github.com/repp/big-phoney

just do contractions manually?
https://commons.wikimedia.org/wiki/File:Common_English_contractions.jpg
